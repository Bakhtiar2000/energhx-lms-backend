generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(uuid())
  email         String  @unique
  firstName     String
  lastName      String
  otherName     String?
  sex           Gender
  password      String?
  profile_photo String?
  companyName   String

  streetNumber Int
  street       String
  postalCode   Int
  city         String
  countryId    String
  country      Country @relation(fields: [countryId], references: [id])
  stateId      String
  State        State   @relation(fields: [stateId], references: [id])

  isVerified Boolean    @default(false)
  userType   UserRole
  status     Status     @default(ACTIVE)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  developer  Developer?
  server     Server?

  reviews          Review[]
  quizSubmissions  QuizSubmission[]
  progresses       Progress[]
  enrolledPrograms UserProgram[]
}

model Country {
  id        String   @id @default(uuid())
  name      String   @unique
  code      String   @unique
  states    State[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]
}

model State {
  id        String  @id @default(uuid())
  name      String
  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  users User[]
}

model Developer {
  id     String @id @default(uuid())
  email  String @unique
  status Status @default(ACTIVE)

  references   Reference[]
  publications Publication[]
  experiences  Experience[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Server {
  id     String @id @default(uuid())
  email  String @unique
  status Status @default(ACTIVE)

  references   Reference[]
  publications Publication[]
  experiences  Experience[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Publication {
  id              String @id @default(uuid())
  publisher       String
  title           String
  authorList      String
  pages           String
  publicationYear Int

  developer   Developer? @relation(fields: [developerId], references: [id])
  developerId String?
  server      Server?    @relation(fields: [serverId], references: [id])
  serverId    String?
}

model Reference {
  id       String @id @default(uuid())
  name     String
  document String

  developer   Developer? @relation(fields: [developerId], references: [id])
  developerId String?
  server      Server?    @relation(fields: [serverId], references: [id])
  serverId    String?
}

model Experience {
  id        String   @id @default(uuid())
  name      String
  address   String
  title     String
  startDate DateTime
  endDate   DateTime

  developer   Developer? @relation(fields: [developerId], references: [id])
  developerId String?
  server      Server?    @relation(fields: [serverId], references: [id])
  serverId    String?
}

model UserProgram {
  id        String   @id @default(uuid())
  joinedAt  DateTime @default(now())
  payment   Payment?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  programId String
  program   Program  @relation(fields: [programId], references: [id])

  @@unique([userId, programId])
}

model Program {
  id           String   @id @default(uuid())
  thumbnail    String
  description  String
  title        String
  price        Float
  publishedFor UserRole
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  courses       Course[]
  enrolledUsers UserProgram[]
}

model Course {
  id            String   @id @default(uuid())
  title         String
  thumbnail     String
  averageRating Float    @default(0.00)
  isCompleted   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  modules    Module[]
  reviews    Review[]
  progresses Progress[]

  program   Program @relation(fields: [programId], references: [id])
  programId String
}

model Module {
  id        String   @id @default(uuid())
  title     String
  thumbnail String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contents Content[]

  courseId String
  course   Course @relation(fields: [courseId], references: [id])
}

model Content {
  id          String        @id @default(uuid())
  title       String
  contentType ContentType
  video       String?
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  quiz        QuizInstance?

  moduleId   String
  module     Module     @relation(fields: [moduleId], references: [id])
  progresses Progress[]
}

model Quiz {
  id            String   @id @default(uuid())
  question      String
  options       String[]
  correctAnswer Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  quizInstanceId String
  quizInstance   QuizInstance @relation(fields: [quizInstanceId], references: [id])
}

model QuizInstance {
  id        String   @id @default(uuid())
  totalMark Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quizzes         Quiz[] // QuizInstance contains several quizzes
  quizSubmissions QuizSubmission[] // QuizInstance contains several userQuizSubmissions.

  contentId String  @unique
  content   Content @relation(fields: [contentId], references: [id])
}

model QuizSubmission {
  id               String   @id @default(uuid())
  correctAnswers   Int
  incorrectAnswers Int
  isCompleted      Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  quizInstanceId String
  quizInstance   QuizInstance @relation(fields: [quizInstanceId], references: [id])
  userId         String
  user           User         @relation(fields: [userId], references: [id])

  @@unique([quizInstanceId, userId]) // Ensures a user has only one submission per quiz instance
}

model Progress {
  id         String @id @default(uuid())
  percentage Int    @default(0) // Progress percentage (0-100)

  userId    String
  user      User    @relation(fields: [userId], references: [id])
  courseId  String
  course    Course  @relation(fields: [courseId], references: [id])
  contentId String
  content   Content @relation(fields: [contentId], references: [id])

  @@unique([userId, courseId])
}

model Review {
  id      String @id @default(uuid())
  comment String
  rating  Int

  user     User   @relation(fields: [userId], references: [id])
  userId   String
  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  @@unique([userId, courseId])
}

model Payment {
  id              String        @id @default(uuid())
  amount          Float
  currency        String
  status          PaymentStatus @default(PENDING)
  stripeSessionId String        @unique
  createdAt       DateTime      @default(now())

  userProgramId String      @unique
  userProgram   UserProgram @relation(fields: [userProgramId], references: [id])
}

enum UserRole {
  SERVER
  DEVELOPER
  ADMIN
}

enum Status {
  BLOCKED
  ACTIVE
}

enum Gender {
  MALE
  FEMALE
}

enum ContentType {
  VIDEO
  DESCRIPTION
  QUIZ
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

enum SubmissionStatus {
  LATE
  ONTIME
}
