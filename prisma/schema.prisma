generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String  @id @default(uuid())
  email                String  @unique
  firstName            String
  lastName             String
  otherName            String?
  sex                  Gender
  phoneNumber          String
  alternatePhoneNumber String?
  password             String?
  profile_photo        String?

  streetNumber Int
  street       String
  postalCode   Int
  city         String

  countryId String
  country   Country @relation(fields: [countryId], references: [id])
  stateId   String
  State     State   @relation(fields: [stateId], references: [id])

  isVerified Boolean    @default(false)
  userType   UserRole
  status     Status     @default(ACTIVE)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  developer  Developer?
  server     Server?
}

model Country {
  id        String   @id @default(uuid())
  name      String   @unique
  code      String   @unique
  states    State[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]
}

model State {
  id        String  @id @default(uuid())
  name      String
  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  users User[]
}

model Developer {
  id    String @id @default(uuid())
  email String @unique

  reference    Reference?
  publications Publication[]
  experiences  Experience[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Server {
  id    String @id @default(uuid())
  email String @unique

  reference    Reference?
  publications Publication[]
  experiences  Experience[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Publication {
  id              String @id @default(uuid())
  publisher       String
  title           String
  authorList      String
  pages           String
  publicationYear Int

  developer   Developer? @relation(fields: [developerId], references: [id])
  developerId String?
  server      Server?    @relation(fields: [serverId], references: [id])
  serverId    String?
}

model Reference {
  id       String @id @default(uuid())
  name     String
  document String

  developer   Developer? @relation(fields: [developerId], references: [id])
  developerId String?    @unique

  server   Server? @relation(fields: [serverId], references: [id])
  serverId String? @unique
}

model Experience {
  id        String   @id @default(uuid())
  name      String
  address   String
  title     String
  startDate DateTime
  endDate   DateTime

  developer   Developer? @relation(fields: [developerId], references: [id])
  developerId String?
  server      Server?    @relation(fields: [serverId], references: [id])
  serverId    String?
}

enum UserRole {
  SERVER
  DEVELOPER
  ADMIN
}

enum Status {
  BLOCKED
  ACTIVE
  DELETED
}

enum Gender {
  MALE
  FEMALE
}
