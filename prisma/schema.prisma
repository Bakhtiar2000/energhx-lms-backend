generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(uuid())
  email         String  @unique
  firstName     String
  lastName      String
  otherName     String?
  sex           Gender
  password      String?
  profile_photo String?
  companyName   String

  streetNumber Int
  street       String
  postalCode   Int
  city         String

  countryId String
  country   Country @relation(fields: [countryId], references: [id])
  stateId   String
  State     State   @relation(fields: [stateId], references: [id])

  isVerified Boolean    @default(false)
  userType   UserRole
  status     Status     @default(ACTIVE)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  developer  Developer?
  server     Server?

  review               Review[]
  AssignmentSubmission AssignmentSubmission[]
  // Progress             Progress[]
}

model Country {
  id        String   @id @default(uuid())
  name      String   @unique
  code      String   @unique
  states    State[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]
}

model State {
  id        String  @id @default(uuid())
  name      String
  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  users User[]
}

model Developer {
  id     String @id @default(uuid())
  email  String @unique
  status Status @default(ACTIVE)

  references   Reference[]
  publications Publication[]
  experiences  Experience[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Server {
  id     String @id @default(uuid())
  email  String @unique
  status Status @default(ACTIVE)

  references   Reference[]
  publications Publication[]
  experiences  Experience[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Publication {
  id              String @id @default(uuid())
  publisher       String
  title           String
  authorList      String
  pages           String
  publicationYear Int

  developer   Developer? @relation(fields: [developerId], references: [id])
  developerId String?
  server      Server?    @relation(fields: [serverId], references: [id])
  serverId    String?
}

model Reference {
  id       String @id @default(uuid())
  name     String
  document String

  developer   Developer? @relation(fields: [developerId], references: [id])
  developerId String?
  server      Server?    @relation(fields: [serverId], references: [id])
  serverId    String?
}

model Experience {
  id        String   @id @default(uuid())
  name      String
  address   String
  title     String
  startDate DateTime
  endDate   DateTime

  developer   Developer? @relation(fields: [developerId], references: [id])
  developerId String?
  server      Server?    @relation(fields: [serverId], references: [id])
  serverId    String?
}

model Program {
  id           String   @id @default(uuid())
  thumbnail    String
  description  String
  title        String
  price        Float
  publishedFor UserRole
  course       Course[]
  // payment      Payment[]
}

model Course {
  id            String   @id @default(uuid())
  title         String
  thumbnail     String
  averageRating Float    @default(0.00)
  isCompleted   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  module Module[]
  review Review[]
  // Progress Progress[]

  program   Program @relation(fields: [programId], references: [id])
  programId String
}

model Module {
  id        String   @id @default(uuid())
  title     String
  thumbnail String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content Content[]

  courseId String
  course   Course @relation(fields: [courseId], references: [id])
}

model Content {
  id          String      @id @default(uuid())
  title       String
  contentType ContentType
  video       String?
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  assignment  Assignment?
  // Progress    Progress?

  moduleId String
  module   Module @relation(fields: [moduleId], references: [id])
}

model Assignment {
  id        String   @id @default(uuid())
  title     String
  deadline  DateTime
  totalMark Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assignmentSubmission AssignmentSubmission[]

  contentId String  @unique
  content   Content @relation(fields: [contentId], references: [id])
}

model AssignmentSubmission {
  id               String           @id @default(uuid())
  submissionTime   DateTime
  submissionStatus SubmissionStatus
  submission       String
  acquiredMark     Int              @default(0)
  isSubmitted      Boolean          @default(false)
  isReviewed       Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  userId       String
  user         User       @relation(fields: [userId], references: [id])

  @@unique([assignmentId, userId])
}

// model Progress {
//   id         String @id @default(uuid())
//   percentage Int    @default(0) // Progress percentage (0-100)

//   userId    String
//   user      User    @relation(fields: [userId], references: [id])
//   courseId  String
//   course    Course  @relation(fields: [courseId], references: [id])
//   contentId String  @unique
//   content   Content @relation(fields: [contentId], references: [id])

//   @@unique([userId, courseId])
// }

model Review {
  id      String @id @default(uuid())
  comment String
  rating  Int

  user     User   @relation(fields: [userId], references: [id])
  userId   String
  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  @@unique([userId, courseId])
}

enum UserRole {
  SERVER
  DEVELOPER
  ADMIN
}

enum Status {
  BLOCKED
  ACTIVE
  DELETED
}

enum Gender {
  MALE
  FEMALE
}

enum ContentType {
  VIDEO
  DESCRIPTION
  ASSIGNMENT
}

enum SubmissionStatus {
  LATE
  ONTIME
}
